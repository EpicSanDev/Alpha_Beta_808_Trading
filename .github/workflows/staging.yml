name: Staging Deployment

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - testing

env:
  REGISTRY: rg.fr-par.scw.cloud/namespace-ecstatic-einstein
  IMAGE_NAME: alphabeta808-trading-bot

jobs:
  # Tests rapides pour staging
  quick-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8
    
    - name: Quick syntax check
      run: |
        python -m py_compile *.py
        python -m py_compile src/**/*.py
    
    - name: Basic system check
      run: |
        python system_check.py
      continue-on-error: true

  # Build pour staging
  build-staging:
    runs-on: ubuntu-latest
    needs: quick-test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCW_SECRET_KEY }}
    
    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # DÃ©ploiement staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-staging
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://staging.alphabeta808.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl for staging
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Create staging namespace if not exists
      run: |
        kubectl create namespace alphabeta808-staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy staging configuration
      run: |
        # Copier les manifests K8s et les adapter pour staging
        cp -r k8s/ k8s-staging/
        
        # Modifier le namespace
        sed -i 's/alphabeta808-trading/alphabeta808-staging/g' k8s-staging/*.yaml
        
        # Modifier l'image
        sed -i 's|alphabeta808/trading-bot:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}|g' k8s-staging/*-deployment.yaml
        
        # Appliquer les manifests
        kubectl apply -f k8s-staging/ -n alphabeta808-staging
    
    - name: Wait for staging deployment
      run: |
        kubectl rollout status deployment/trading-bot -n alphabeta808-staging --timeout=300s
        kubectl rollout status deployment/trading-web-interface -n alphabeta808-staging --timeout=300s
    
    - name: Run health checks
      run: |
        # Attendre que les pods soient prÃªts
        kubectl wait --for=condition=ready pod -l app=trading-bot -n alphabeta808-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=trading-web-interface -n alphabeta808-staging --timeout=300s
        
        # VÃ©rifier la santÃ© de l'API
        kubectl port-forward svc/trading-web-service 8080:5000 -n alphabeta808-staging &
        sleep 10
        curl -f http://localhost:8080/api/status || exit 1
        
        echo "âœ… Staging deployment successful!"

  # Tests d'intÃ©gration sur staging
  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Run integration tests
      run: |
        # Port forward pour les tests
        kubectl port-forward svc/trading-web-service 8080:5000 -n alphabeta808-staging &
        
        # Attendre que le port forward soit actif
        sleep 15
        
        # Tests d'API basiques
        curl -f http://localhost:8080/api/status
        curl -f http://localhost:8080/api/performance
        
        echo "âœ… Integration tests passed!"
    
    - name: Performance baseline test
      run: |
        # Test de charge lÃ©ger avec curl
        for i in {1..10}; do
          curl -f http://localhost:8080/api/status > /dev/null
          echo "Request $i completed"
        done
        
        echo "âœ… Performance baseline test passed!"

  # Nettoyage automatique (optionnel)
  cleanup:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event.inputs.environment == 'testing'
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Cleanup testing environment
      run: |
        kubectl delete namespace alphabeta808-staging --ignore-not-found
        echo "ðŸ§¹ Testing environment cleaned up!"
