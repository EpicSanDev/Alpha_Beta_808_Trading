name: CI/CD Pipeline - AlphaBeta808 Trading Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permet de déclencher manuellement
  release:
    types: [ created ]

env:
  REGISTRY: rg.fr-par.scw.cloud
  NAMESPACE: namespace-ecstatic-einstein
  IMAGE_NAME: alphabeta808-trading-bot
  K8S_NAMESPACE: alphabeta808-trading

jobs:
  # Tests et vérifications
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r web_interface/requirements.txt
        pip install pytest flake8 black
    
    - name: Code formatting check
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run system checks
      run: |
        python system_check.py
      continue-on-error: true
    
    - name: Run basic tests
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true

  # Build et push de l'image Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCW_SECRET_KEY }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Déploiement vers staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Kubernetes config
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }}-staging --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create/Update secrets from GitHub Secrets
      run: |
        kubectl create secret generic trading-secrets \
          --from-literal=binance-api-key="${{ secrets.BINANCE_API_KEY_STAGING }}" \
          --from-literal=binance-api-secret="${{ secrets.BINANCE_API_SECRET_STAGING }}" \
          --from-literal=webhook-secret="${{ secrets.WEBHOOK_SECRET }}" \
          --from-literal=web-admin-user="${{ secrets.WEB_ADMIN_USER }}" \
          --from-literal=web-admin-password="${{ secrets.WEB_ADMIN_PASSWORD }}" \
          --from-literal=database-url="${{ secrets.DATABASE_URL_STAGING }}" \
          --from-literal=smtp-password="${{ secrets.SMTP_PASSWORD }}" \
          --namespace=${{ env.K8S_NAMESPACE }}-staging \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Create/Update environment secrets
      run: |
        kubectl create secret generic environment-secrets \
          --from-literal=environment="staging" \
          --from-literal=deployment-timestamp="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --from-literal=git-commit="${{ github.sha }}" \
          --from-literal=git-branch="${{ github.ref_name }}" \
          --namespace=${{ env.K8S_NAMESPACE }}-staging \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Validate secrets configuration
      run: |
        # Vérifier que tous les secrets requis sont présents
        kubectl get secret trading-secrets -n ${{ env.K8S_NAMESPACE }}-staging
        kubectl get secret environment-secrets -n ${{ env.K8S_NAMESPACE }}-staging
        
        # Vérifier que les secrets contiennent les clés attendues
        kubectl get secret trading-secrets -n ${{ env.K8S_NAMESPACE }}-staging -o jsonpath='{.data}' | jq 'keys[]' | grep -E "(binance-api-key|binance-api-secret|webhook-secret)"

        # Vérifier que les valeurs des secrets ne sont pas exposées
        kubectl get secret trading-secrets -n ${{ env.K8S_NAMESPACE }}-staging -o jsonpath='{.data}' | jq 'map_values(@base64d)' | grep -E "(your_expected_value_pattern)"

        # Vérifier la présence de labels et annotations de sécurité
        kubectl get secret trading-secrets -n ${{ env.K8S_NAMESPACE }}-staging -o json | jq '.[].metadata' | grep -E "(labels|annotations)"

    - name: Deploy to staging
      run: |
        # Copier les manifests et les adapter pour staging
        cp -r k8s/ k8s-staging/
        
        # Modifier les namespaces pour staging
        sed -i "s|namespace: alphabeta808-trading|namespace: ${{ env.K8S_NAMESPACE }}-staging|g" k8s-staging/*.yaml
        
        # Mettre à jour les images avec le tag de la branche
        IMAGE_TAG=$(echo "${{ github.ref_name }}-${{ github.sha }}" | head -c 12)
        sed -i "s|image: rg.fr-par.scw.cloud/namespace-ecstatic-einstein/alphabeta808-trading-bot:latest|image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|g" k8s-staging/*.yaml
        
        # Appliquer les manifests
        kubectl apply -f k8s-staging/namespace.yaml
        kubectl apply -f k8s-staging/configmap.yaml
        kubectl apply -f k8s-staging/pvc.yaml
        kubectl apply -f k8s-staging/rbac.yaml
        kubectl apply -f k8s-staging/services.yaml
        kubectl apply -f k8s-staging/bot-deployment.yaml
        kubectl apply -f k8s-staging/web-deployment.yaml
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/trading-bot -n ${{ env.K8S_NAMESPACE }}-staging --timeout=300s
        kubectl rollout status deployment/trading-web-interface -n ${{ env.K8S_NAMESPACE }}-staging --timeout=300s

  # Déploiement vers production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Set up Kubernetes config
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create/Update secrets from GitHub Secrets
      run: |
        kubectl create secret generic trading-secrets \
          --from-literal=binance-api-key="${{ secrets.BINANCE_API_KEY_PRODUCTION }}" \
          --from-literal=binance-api-secret="${{ secrets.BINANCE_API_SECRET_PRODUCTION }}" \
          --from-literal=webhook-secret="${{ secrets.WEBHOOK_SECRET }}" \
          --from-literal=web-admin-user="${{ secrets.WEB_ADMIN_USER }}" \
          --from-literal=web-admin-password="${{ secrets.WEB_ADMIN_PASSWORD }}" \
          --from-literal=database-url="${{ secrets.DATABASE_URL_PRODUCTION }}" \
          --from-literal=smtp-password="${{ secrets.SMTP_PASSWORD }}" \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy to production
      run: |
        # Mettre à jour les images avec le tag latest
        sed -i "s|image: rg.fr-par.scw.cloud/namespace-ecstatic-einstein/alphabeta808-trading-bot:latest|image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest|g" k8s/*.yaml
        
        # Appliquer les manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/pvc.yaml
        kubectl apply -f k8s/rbac.yaml
        kubectl apply -f k8s/services.yaml
        kubectl apply -f k8s/bot-deployment.yaml
        kubectl apply -f k8s/web-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/pdb.yaml
        kubectl apply -f k8s/monitoring.yaml
        
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/trading-bot -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/trading-web-interface -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
    - name: Run post-deployment health checks
      run: |
        # Attendre que les pods soient prêts
        kubectl wait --for=condition=ready pod -l app=trading-bot -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        kubectl wait --for=condition=ready pod -l app=trading-web-interface -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
        # Vérifier les logs pour des erreurs critiques
        kubectl logs -l app=trading-bot -n ${{ env.K8S_NAMESPACE }} --tail=50 | grep -i "error\|exception\|critical" || true

  # Déploiement automatique (ancien - à supprimer après migration)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://trading.alphabeta808.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        # Créer le namespace s'il n'existe pas
        kubectl create namespace alphabeta808-trading --dry-run=client -o yaml | kubectl apply -f -
        
        # Vérifier si les déployments existent, sinon les créer
        if ! kubectl get deployment trading-bot -n alphabeta808-trading &> /dev/null; then
          echo "Deployment trading-bot not found, applying from k8s manifests..."
          kubectl apply -f k8s/ -n alphabeta808-trading
        fi
        
        if ! kubectl get deployment trading-web-interface -n alphabeta808-trading &> /dev/null; then
          echo "Deployment trading-web-interface not found, applying from k8s manifests..."
          kubectl apply -f k8s/ -n alphabeta808-trading
        fi
        
        # Mise à jour de l'image dans les déployments
        kubectl set image deployment/trading-bot \
          trading-bot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n alphabeta808-trading
        
        kubectl set image deployment/trading-web-interface \
          web-interface=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n alphabeta808-trading
        
        # Attendre que le déploiement soit terminé
        kubectl rollout status deployment/trading-bot -n alphabeta808-trading --timeout=300s
        kubectl rollout status deployment/trading-web-interface -n alphabeta808-trading --timeout=300s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n alphabeta808-trading
        kubectl get services -n alphabeta808-trading

  # Notification de déploiement
  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "🚀 AlphaBeta808 Trading Bot Deployment Status:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build-and-push.result }}"
        echo "- Staging Deploy: ${{ needs.deploy-staging.result }}"
        echo "- Production Deploy: ${{ needs.deploy-production.result }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
