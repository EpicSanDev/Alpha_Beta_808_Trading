name: CI/CD Pipeline - AlphaBeta808 Trading Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: rg.fr-par.scw.cloud/namespace-ecstatic-einstein
  IMAGE_NAME: alphabeta808-trading-bot

jobs:
  # Tests et vérifications
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r web_interface/requirements.txt
        pip install pytest flake8 black
    
    - name: Code formatting check
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run system checks
      run: |
        python system_check.py
      continue-on-error: true
    
    - name: Run basic tests
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true

  # Build et push de l'image Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCW_SECRET_KEY }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Déploiement automatique (optionnel)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://trading.alphabeta808.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        # Créer le namespace s'il n'existe pas
        kubectl create namespace alphabeta808-trading --dry-run=client -o yaml | kubectl apply -f -
        
        # Vérifier si les déployments existent, sinon les créer
        if ! kubectl get deployment trading-bot -n alphabeta808-trading &> /dev/null; then
          echo "Deployment trading-bot not found, applying from k8s manifests..."
          kubectl apply -f k8s/ -n alphabeta808-trading
        fi
        
        if ! kubectl get deployment trading-web-interface -n alphabeta808-trading &> /dev/null; then
          echo "Deployment trading-web-interface not found, applying from k8s manifests..."
          kubectl apply -f k8s/ -n alphabeta808-trading
        fi
        
        # Mise à jour de l'image dans les déployments
        kubectl set image deployment/trading-bot \
          trading-bot=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n alphabeta808-trading
        
        kubectl set image deployment/trading-web-interface \
          web-interface=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -n alphabeta808-trading
        
        # Attendre que le déploiement soit terminé
        kubectl rollout status deployment/trading-bot -n alphabeta808-trading --timeout=300s
        kubectl rollout status deployment/trading-web-interface -n alphabeta808-trading --timeout=300s
    
    - name: Verify deployment
      run: |
        kubectl get pods -n alphabeta808-trading
        kubectl get services -n alphabeta808-trading

  # Notification de déploiement
  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          AlphaBeta808 Trading Bot deployment:
          - Tests: ${{ needs.test.result }}
          - Build: ${{ needs.build-and-push.result }}
          - Deploy: ${{ needs.deploy.result }}
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
