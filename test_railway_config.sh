#!/bin/bash

# AlphaBeta808 Trading Bot - Railway Pre-deployment Test
# Ce script teste la configuration Railway localement avant le d√©ploiement

set -e

echo "üöÄ AlphaBeta808 Trading Bot - Railway Pre-deployment Test"
echo "========================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
function print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

function print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

function print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Test 1: V√©rifier la pr√©sence des fichiers Railway
echo -e "\n${BLUE}üìã Test 1: V√©rification des fichiers de configuration Railway${NC}"

if [ -f "railway.toml" ]; then
    print_status 0 "railway.toml existe"
else
    print_status 1 "railway.toml manquant"
    exit 1
fi

if [ -f "Procfile" ]; then
    print_status 0 "Procfile existe"
else
    print_status 1 "Procfile manquant"
    exit 1
fi

if [ -f "Dockerfile.railway" ]; then
    print_status 0 "Dockerfile.railway existe"
else
    print_status 1 "Dockerfile.railway manquant"
    exit 1
fi

# Test 2: V√©rifier la configuration railway.toml
echo -e "\n${BLUE}üìã Test 2: Validation de railway.toml${NC}"

if grep -q "dockerfilePath = \"Dockerfile.railway\"" railway.toml; then
    print_status 0 "Dockerfile.railway correctement r√©f√©renc√©"
else
    print_status 1 "Dockerfile.railway mal r√©f√©renc√© dans railway.toml"
fi

if grep -q "healthcheckPath = \"/health\"" railway.toml; then
    print_status 0 "Health check path configur√©"
else
    print_status 1 "Health check path mal configur√©"
fi

# Test 3: V√©rifier l'application Flask
echo -e "\n${BLUE}üìã Test 3: Test de l'application Flask${NC}"

if [ -f "web_interface/app_enhanced.py" ]; then
    print_status 0 "Application Flask existe"
    
    # V√©rifier l'endpoint de sant√©
    if grep -q "@app.route('/health'" web_interface/app_enhanced.py; then
        print_status 0 "Endpoint /health trouv√©"
    else
        print_status 1 "Endpoint /health manquant"
    fi
else
    print_status 1 "Application Flask manquante"
    exit 1
fi

# Test 4: V√©rifier les d√©pendances
echo -e "\n${BLUE}üìã Test 4: V√©rification des d√©pendances${NC}"

if [ -f "requirements.txt" ]; then
    print_status 0 "requirements.txt existe"
    
    # V√©rifier quelques d√©pendances cl√©s
    if grep -q "flask" requirements.txt; then
        print_status 0 "Flask dans requirements.txt"
    else
        print_status 1 "Flask manquant dans requirements.txt"
    fi
    
    if grep -q "flask-socketio" requirements.txt; then
        print_status 0 "Flask-SocketIO dans requirements.txt"
    else
        print_status 1 "Flask-SocketIO manquant dans requirements.txt"
    fi
else
    print_status 1 "requirements.txt manquant"
fi

# Test 5: Variables d'environnement
echo -e "\n${BLUE}üìã Test 5: V√©rification des variables d'environnement${NC}"

if [ -f ".env.railway" ]; then
    print_status 0 "Fichier .env.railway exemple existe"
else
    print_warning "Fichier .env.railway manquant (optionnel)"
fi

# Test 6: Test de build Docker (optionnel)
echo -e "\n${BLUE}üìã Test 6: Test de build Docker (optionnel)${NC}"

print_info "Voulez-vous tester le build Docker ? (y/n)"
read -p "Build Docker: " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Construction de l'image Docker Railway..."
    
    if docker build -f Dockerfile.railway -t alphabeta808-railway-test .; then
        print_status 0 "Build Docker r√©ussi"
        
        # Nettoyer l'image de test
        docker rmi alphabeta808-railway-test > /dev/null 2>&1 || true
    else
        print_status 1 "Build Docker √©chou√©"
    fi
else
    print_info "Test Docker ignor√©"
fi

# Test 7: Validation des ports
echo -e "\n${BLUE}üìã Test 7: Validation de la configuration des ports${NC}"

if grep -q "PORT = \$PORT" railway.toml; then
    print_status 0 "Variable PORT configur√©e pour Railway"
else
    print_status 1 "Variable PORT mal configur√©e"
fi

# Test 8: S√©curit√© de base
echo -e "\n${BLUE}üìã Test 8: V√©rification de s√©curit√© de base${NC}"

# V√©rifier qu'il n'y a pas de secrets hardcod√©s
if grep -r "sk-" . --include="*.py" --include="*.toml" --include="*.txt" > /dev/null 2>&1; then
    print_status 1 "Secrets potentiels trouv√©s dans le code"
else
    print_status 0 "Pas de secrets hardcod√©s d√©tect√©s"
fi

if grep -r "AKIA" . --include="*.py" --include="*.toml" --include="*.txt" > /dev/null 2>&1; then
    print_status 1 "Cl√©s AWS potentielles trouv√©es dans le code"
else
    print_status 0 "Pas de cl√©s AWS hardcod√©es d√©tect√©es"
fi

# Test 9: Structure des r√©pertoires
echo -e "\n${BLUE}üìã Test 9: V√©rification de la structure des r√©pertoires${NC}"

required_dirs=("web_interface" "src" "config")
for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        print_status 0 "R√©pertoire $dir existe"
    else
        print_status 1 "R√©pertoire $dir manquant"
    fi
done

# R√©sum√© final
echo -e "\n${BLUE}üéØ R√©sum√© du test de pr√©-d√©ploiement${NC}"
echo "=================================================="

print_info "Configuration Railway : ‚úÖ Pr√™te"
print_info "Application Flask : ‚úÖ Configur√©e"
print_info "Dockerfile optimis√© : ‚úÖ Pr√©sent"
print_info "Health check : ‚úÖ Configur√©"

echo -e "\n${GREEN}üöÄ Prochaines √©tapes pour le d√©ploiement Railway :${NC}"
echo "1. Cr√©er un compte Railway (https://railway.app)"
echo "2. Connecter votre repository GitHub"
echo "3. Configurer les variables d'environnement (voir .env.railway)"
echo "4. G√©n√©rer des cl√©s s√©curis√©es :"
echo "   openssl rand -base64 32  # Pour SECRET_KEY"
echo "   openssl rand -base64 32  # Pour WEBHOOK_SECRET"
echo "5. Ajouter vos cl√©s API Binance"
echo "6. D√©ployer et tester l'endpoint de sant√©"

echo -e "\n${YELLOW}‚ö†Ô∏è  Important :${NC}"
echo "- Utilisez le mode sandbox/testnet initialement"
echo "- Changez le mot de passe admin par d√©faut"
echo "- Surveillez les logs lors du premier d√©ploiement"

echo -e "\n${GREEN}‚úÖ Test de pr√©-d√©ploiement termin√© avec succ√®s !${NC}"
