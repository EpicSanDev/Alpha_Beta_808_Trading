#!/bin/bash

# AlphaBeta808 Trading Bot - Railway Deployment Helper
# Ce script aide √† pr√©parer et d√©ployer sur Railway

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${BLUE}üöÇ AlphaBeta808 Trading Bot - Railway Deployment Helper${NC}"
echo "================================================================"

# Fonction pour g√©n√©rer des cl√©s s√©curis√©es
generate_keys() {
    echo -e "\n${PURPLE}üîê G√©n√©ration de cl√©s s√©curis√©es${NC}"
    
    if command -v openssl &> /dev/null; then
        SECRET_KEY=$(openssl rand -base64 32)
        WEBHOOK_SECRET=$(openssl rand -base64 32)
        
        echo -e "${GREEN}‚úÖ Cl√©s g√©n√©r√©es avec succ√®s !${NC}"
        echo ""
        echo -e "${YELLOW}üìã Copiez ces valeurs dans Railway Dashboard ‚Üí Variables:${NC}"
        echo ""
        echo -e "${BLUE}SECRET_KEY=${NC}${SECRET_KEY}"
        echo -e "${BLUE}WEBHOOK_SECRET=${NC}${WEBHOOK_SECRET}"
        echo ""
        echo -e "${YELLOW}üíæ Sauvegardez ces cl√©s dans un endroit s√ªr !${NC}"
    else
        echo -e "${RED}‚ùå OpenSSL non trouv√©. Installez OpenSSL pour g√©n√©rer des cl√©s s√©curis√©es.${NC}"
        echo -e "${YELLOW}Alternative: utilisez un g√©n√©rateur de mots de passe en ligne${NC}"
    fi
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    echo -e "\n${PURPLE}üìã V√©rification des pr√©requis${NC}"
    
    # V√©rifier Git
    if command -v git &> /dev/null; then
        echo -e "${GREEN}‚úÖ Git install√©${NC}"
    else
        echo -e "${RED}‚ùå Git non install√©${NC}"
        exit 1
    fi
    
    # V√©rifier les fichiers Railway
    if [ -f "Dockerfile.railway" ]; then
        echo -e "${GREEN}‚úÖ Dockerfile.railway pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Dockerfile.railway manquant${NC}"
        exit 1
    fi
    
    if [ -f ".railwayignore" ]; then
        echo -e "${GREEN}‚úÖ .railwayignore pr√©sent${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  .railwayignore manquant (optionnel)${NC}"
    fi
    
    if [ -f "Procfile" ]; then
        echo -e "${GREEN}‚úÖ Procfile pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Procfile manquant${NC}"
        exit 1
    fi
}

# Fonction pour v√©rifier le repository Git
check_git_status() {
    echo -e "\n${PURPLE}üìö V√©rification du repository Git${NC}"
    
    if [ ! -d ".git" ]; then
        echo -e "${RED}‚ùå Pas un repository Git${NC}"
        echo -e "${YELLOW}Initialisez avec: git init${NC}"
        return 1
    fi
    
    # V√©rifier s'il y a des changes non commit√©es
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Changements non commit√©es d√©tect√©s${NC}"
        echo -e "${BLUE}Voulez-vous committer les changements ? (y/n)${NC}"
        read -p "Commit: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "Pr√©paration pour d√©ploiement Railway"
            echo -e "${GREEN}‚úÖ Changements commit√©es${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Repository √† jour${NC}"
    fi
    
    # V√©rifier remote origin
    if git remote get-url origin &> /dev/null; then
        ORIGIN_URL=$(git remote get-url origin)
        echo -e "${GREEN}‚úÖ Remote origin configur√©: ${ORIGIN_URL}${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pas de remote origin configur√©${NC}"
        echo -e "${BLUE}Ajoutez votre repository GitHub:${NC}"
        echo -e "${BLUE}git remote add origin https://github.com/username/AlphaBeta808Trading.git${NC}"
    fi
}

# Fonction principale de d√©ploiement
deploy_guide() {
    echo -e "\n${PURPLE}üöÄ Guide de d√©ploiement Railway${NC}"
    echo ""
    echo -e "${BLUE}1. Aller sur Railway${NC}"
    echo "   ‚Üí Visitez https://railway.app"
    echo "   ‚Üí Connectez-vous avec GitHub"
    echo ""
    echo -e "${BLUE}2. Cr√©er un nouveau projet${NC}"
    echo "   ‚Üí Cliquez 'New Project'"
    echo "   ‚Üí S√©lectionnez 'Deploy from GitHub repo'"
    echo "   ‚Üí Choisissez votre repository AlphaBeta808Trading"
    echo "   ‚Üí Railway d√©tectera automatiquement le Dockerfile.railway"
    echo ""
    echo -e "${BLUE}3. Configurer les variables d'environnement${NC}"
    echo "   ‚Üí Allez dans Settings ‚Üí Variables"
    echo "   ‚Üí Ajoutez les variables suivantes:"
    echo ""
    echo -e "${YELLOW}   Variables OBLIGATOIRES:${NC}"
    echo "   - SECRET_KEY (g√©n√©r√© ci-dessus)"
    echo "   - WEBHOOK_SECRET (g√©n√©r√© ci-dessus)"
    echo "   - WEB_ADMIN_USER (ex: admin)"
    echo "   - WEB_ADMIN_PASSWORD (choisissez un mot de passe fort)"
    echo "   - BINANCE_API_KEY (votre cl√© API Binance)"
    echo "   - BINANCE_API_SECRET (votre secret API Binance)"
    echo ""
    echo -e "${YELLOW}   Variables OPTIONNELLES:${NC}"
    echo "   - EMAIL_ENABLED=false"
    echo "   - TELEGRAM_ENABLED=false"
    echo ""
    echo -e "${BLUE}4. D√©ployer${NC}"
    echo "   ‚Üí Railway d√©tecte automatiquement les projets Docker"
    echo "   ‚Üí Aucun fichier de configuration suppl√©mentaire n√©cessaire"
    echo "   ‚Üí Le d√©ploiement commencera automatiquement"
    echo "   ‚Üí Surveillez les logs de build"
    echo ""
    echo -e "${BLUE}5. V√©rifier le d√©ploiement${NC}"
    echo "   ‚Üí Votre app sera disponible √†: your-app.railway.app"
    echo "   ‚Üí Testez: your-app.railway.app/health"
    echo "   ‚Üí Connectez-vous avec vos identifiants admin"
    echo ""
    echo -e "${GREEN}üéØ D√©ploiement termin√© !${NC}"
}

# Fonction pour afficher les conseils post-d√©ploiement
post_deployment_tips() {
    echo -e "\n${PURPLE}üí° Conseils post-d√©ploiement${NC}"
    echo ""
    echo -e "${YELLOW}S√©curit√©:${NC}"
    echo "‚Ä¢ Changez imm√©diatement le mot de passe admin par d√©faut"
    echo "‚Ä¢ Utilisez le mode sandbox Binance pour les tests"
    echo "‚Ä¢ Activez l'authentification √† deux facteurs sur Binance"
    echo ""
    echo -e "${YELLOW}Monitoring:${NC}"
    echo "‚Ä¢ Surveillez les logs Railway pour d√©tecter les erreurs"
    echo "‚Ä¢ V√©rifiez r√©guli√®rement l'endpoint /health"
    echo "‚Ä¢ Configurez les alertes email/Telegram si n√©cessaire"
    echo ""
    echo -e "${YELLOW}Trading:${NC}"
    echo "‚Ä¢ Commencez avec le mode paper trading"
    echo "‚Ä¢ Testez avec de petits montants d'abord"
    echo "‚Ä¢ Surveillez les performances et ajustez les param√®tres"
    echo ""
    echo -e "${YELLOW}Maintenance:${NC}"
    echo "‚Ä¢ Sauvegardez r√©guli√®rement vos configurations"
    echo "‚Ä¢ Mettez √† jour les d√©pendances p√©riodiquement"
    echo "‚Ä¢ Surveillez l'utilisation des ressources Railway"
}

# Menu principal
show_menu() {
    echo -e "\n${BLUE}Que voulez-vous faire ?${NC}"
    echo "1. V√©rifier les pr√©requis"
    echo "2. G√©n√©rer des cl√©s s√©curis√©es"
    echo "3. V√©rifier le statut Git"
    echo "4. Afficher le guide de d√©ploiement"
    echo "5. Conseils post-d√©ploiement"
    echo "6. Tout faire (recommand√©)"
    echo "0. Quitter"
    echo ""
    read -p "Votre choix: " choice
    
    case $choice in
        1)
            check_prerequisites
            ;;
        2)
            generate_keys
            ;;
        3)
            check_git_status
            ;;
        4)
            deploy_guide
            ;;
        5)
            post_deployment_tips
            ;;
        6)
            check_prerequisites
            generate_keys
            check_git_status
            deploy_guide
            post_deployment_tips
            ;;
        0)
            echo -e "${GREEN}Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Choix invalide${NC}"
            show_menu
            ;;
    esac
}

# Boucle principale
while true; do
    show_menu
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer ou Ctrl+C pour quitter..."
done
