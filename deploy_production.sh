#!/bin/bash

# AlphaBeta808 Trading Bot - Production Deployment Script
# Complete production deployment with monitoring and verification

set -e

echo "üöÄ AlphaBeta808 Trading Bot - Production Deployment"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Variables
DEPLOYMENT_MODE=${1:-docker}  # docker ou kubernetes
VERSION=${2:-latest}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "trader_config.json" ]; then
        log_error "Veuillez ex√©cuter ce script depuis le r√©pertoire racine d'AlphaBeta808Trading"
        exit 1
    fi
    
    # V√©rifier les fichiers de configuration
    if [ ! -f ".env" ]; then
        log_error "Fichier .env manquant. Ex√©cutez setup_production.sh d'abord"
        exit 1
    fi
    
    # V√©rifier la configuration des cl√©s API
    if grep -q "your_binance_api_key_here" .env; then
        log_error "Veuillez configurer vos cl√©s API Binance dans le fichier .env"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Test du syst√®me
test_system() {
    log_info "Test du syst√®me complet..."
    
    # Activer l'environnement virtuel
    if [ -d "trading_env" ]; then
        source trading_env/bin/activate
    fi
    
    # Ex√©cuter les tests de v√©rification
    python system_verification.py
    if [ $? -eq 0 ]; then
        log_success "Syst√®me v√©rifi√© avec succ√®s"
    else
        log_error "Le syst√®me a √©chou√© aux tests de v√©rification"
        exit 1
    fi
}

# D√©ploiement Docker
deploy_docker() {
    log_info "D√©ploiement avec Docker Compose..."
    
    # Construire l'image
    log_info "Construction de l'image Docker..."
    docker build -t alphabeta808/trading-bot:$VERSION .
    
    # D√©marrer les services
    log_info "D√©marrage des services..."
    docker-compose down || true
    docker-compose up -d
    
    # Attendre que les services soient pr√™ts
    log_info "Attente du d√©marrage des services..."
    sleep 30
    
    # V√©rifier que les services sont en cours d'ex√©cution
    if docker-compose ps | grep -q "Up"; then
        log_success "Services Docker d√©marr√©s avec succ√®s"
    else
        log_error "√âchec du d√©marrage des services Docker"
        docker-compose logs
        exit 1
    fi
    
    # Test de connectivit√©
    log_info "Test de connectivit√©..."
    max_attempts=10
    attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:5000/api/system/status > /dev/null 2>&1; then
            log_success "Interface web accessible"
            break
        else
            log_info "Tentative $attempt/$max_attempts - En attente de l'interface web..."
            sleep 10
            attempt=$((attempt + 1))
        fi
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_error "Interface web non accessible apr√®s $max_attempts tentatives"
        exit 1
    fi
}

# D√©ploiement Kubernetes
deploy_kubernetes() {
    log_info "D√©ploiement sur Kubernetes..."
    
    # V√©rifier kubectl
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl non trouv√©. Veuillez l'installer pour le d√©ploiement Kubernetes"
        exit 1
    fi
    
    # V√©rifier la connexion au cluster
    if ! kubectl cluster-info &> /dev/null; then
        log_error "Pas de connexion au cluster Kubernetes"
        exit 1
    fi
    
    # Ex√©cuter le script de d√©ploiement Kubernetes
    cd k8s
    ./deploy.sh $VERSION
    cd ..
    
    log_success "D√©ploiement Kubernetes termin√©"
}

# Configuration du monitoring
setup_monitoring() {
    log_info "Configuration du monitoring..."
    
    # Cr√©er le r√©pertoire des logs s'il n'existe pas
    mkdir -p logs
    
    # D√©marrer le monitoring en arri√®re-plan
    if [ "$DEPLOYMENT_MODE" = "docker" ]; then
        # Le monitoring est inclus dans docker-compose.yml
        log_success "Monitoring configur√© avec Docker Compose"
        log_info "Acc√®s Grafana: http://localhost:3000 (admin/admin123)"
        log_info "Acc√®s Prometheus: http://localhost:9090"
    else
        log_info "Monitoring Kubernetes configur√© via monitoring.yaml"
    fi
}

# V√©rification post-d√©ploiement
post_deployment_checks() {
    log_info "V√©rifications post-d√©ploiement..."
    
    # Liste des endpoints √† v√©rifier
    if [ "$DEPLOYMENT_MODE" = "docker" ]; then
        endpoints=(
            "http://localhost:5000/api/system/status"
            "http://localhost:5000/api/bot/status"
            "http://localhost:3000"  # Grafana
            "http://localhost:9090"  # Prometheus
        )
    else
        # Pour Kubernetes, adapter selon votre configuration d'ingress
        endpoints=(
            "http://localhost:5000/api/system/status"
        )
    fi
    
    for endpoint in "${endpoints[@]}"; do
        if curl -f "$endpoint" > /dev/null 2>&1; then
            log_success "‚úÖ $endpoint"
        else
            log_warning "‚ö†Ô∏è  $endpoint non accessible"
        fi
    done
    
    # V√©rifier les logs pour des erreurs
    log_info "V√©rification des logs..."
    if [ -f "logs/continuous_trader.log" ]; then
        error_count=$(grep -c "ERROR" logs/continuous_trader.log || echo "0")
        if [ "$error_count" -gt 0 ]; then
            log_warning "$error_count erreurs trouv√©es dans les logs"
        else
            log_success "Aucune erreur dans les logs"
        fi
    fi
}

# Affichage des informations de connexion
show_connection_info() {
    echo ""
    echo "üéâ D√©ploiement termin√© avec succ√®s!"
    echo "=================================="
    echo ""
    log_info "Informations de connexion:"
    
    if [ "$DEPLOYMENT_MODE" = "docker" ]; then
        echo "  üìä Interface Web:    http://localhost:5000"
        echo "  üìà Grafana:         http://localhost:3000 (admin/admin123)"
        echo "  üîç Prometheus:      http://localhost:9090"
        echo "  üóÑÔ∏è  Redis:           localhost:6379"
    else
        echo "  üìä Interface Web:    http://localhost:5000 (via port-forward)"
        echo "  üèóÔ∏è  Cluster:         kubectl get pods -n alphabeta808-trading"
    fi
    
    echo ""
    log_info "Commandes utiles:"
    echo "  üìã Voir les logs:        docker-compose logs -f (Docker) ou kubectl logs -f deployment/trading-bot -n alphabeta808-trading (K8s)"
    echo "  üîÑ Red√©marrer:          docker-compose restart (Docker) ou kubectl rollout restart deployment/trading-bot -n alphabeta808-trading (K8s)"
    echo "  üìä Status:              curl http://localhost:5000/api/system/status"
    echo "  üõë Arr√™ter:             docker-compose down (Docker) ou k8s/undeploy.sh (K8s)"
    echo ""
    
    log_warning "IMPORTANT:"
    echo "  - Surveillez les logs pour d√©tecter d'√©ventuels probl√®mes"
    echo "  - Configurez des sauvegardes r√©guli√®res des mod√®les et donn√©es"
    echo "  - Testez le syst√®me avec de petits montants avant la production"
    echo "  - Surveillez la consommation des ressources"
    echo ""
}

# Sauvegarde de s√©curit√©
create_backup() {
    log_info "Cr√©ation d'une sauvegarde de s√©curit√©..."
    
    timestamp=$(date +%Y%m%d_%H%M%S)
    backup_dir="backups/deployment_$timestamp"
    
    mkdir -p "$backup_dir"
    
    # Sauvegarder les fichiers critiques
    cp -r models_store "$backup_dir/" 2>/dev/null || log_warning "Aucun mod√®le √† sauvegarder"
    cp trader_config.json "$backup_dir/"
    cp .env "$backup_dir/.env.backup"
    
    # Sauvegarder la base de donn√©es si elle existe
    if [ -f "trading_web.db" ]; then
        cp trading_web.db "$backup_dir/"
    fi
    
    log_success "Sauvegarde cr√©√©e dans $backup_dir"
}

# Script principal
main() {
    log_info "Mode de d√©ploiement: $DEPLOYMENT_MODE"
    log_info "Version: $VERSION"
    echo ""
    
    # √âtapes de d√©ploiement
    check_prerequisites
    create_backup
    test_system
    
    case $DEPLOYMENT_MODE in
        "docker")
            deploy_docker
            ;;
        "kubernetes"|"k8s")
            deploy_kubernetes
            ;;
        *)
            log_error "Mode de d√©ploiement non support√©: $DEPLOYMENT_MODE"
            log_info "Modes disponibles: docker, kubernetes"
            exit 1
            ;;
    esac
    
    setup_monitoring
    post_deployment_checks
    show_connection_info
}

# Gestion des signaux pour un arr√™t propre
trap 'log_warning "Interruption d√©tect√©e, nettoyage..."; exit 1' INT TERM

# Affichage de l'aide
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: $0 [MODE] [VERSION]"
    echo ""
    echo "MODE:"
    echo "  docker      - D√©ploiement avec Docker Compose (d√©faut)"
    echo "  kubernetes  - D√©ploiement sur Kubernetes"
    echo ""
    echo "VERSION:"
    echo "  latest      - Version la plus r√©cente (d√©faut)"
    echo "  v1.0.0      - Version sp√©cifique"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Docker avec version latest"
    echo "  $0 docker v1.0.0      # Docker avec version v1.0.0"
    echo "  $0 kubernetes         # Kubernetes avec version latest"
    echo ""
    exit 0
fi

# Ex√©cution du script principal
main
